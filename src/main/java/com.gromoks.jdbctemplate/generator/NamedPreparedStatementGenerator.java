package com.gromoks.jdbctemplate.generator;


import com.gromoks.jdbctemplate.generator.util.ParameterSetter;
import com.gromoks.jdbctemplate.util.NamedQueryParser;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;

public class NamedPreparedStatementGenerator implements PreparedStatementGenerator{
    private String sql;
    private Map<String, ?> parameterMap;
    private boolean autoGeneratedKey;
    private NamedQueryParser namedQueryParser;

    public NamedPreparedStatementGenerator(String sql, Map<String, ?> parameterMap) {
        this.sql = sql;
        this.parameterMap = parameterMap;
    }

    public NamedPreparedStatementGenerator(String sql, Map<String, ?> parameterMap, boolean autoGeneratedKey) {
        this.sql = sql;
        this.parameterMap = parameterMap;
        this.autoGeneratedKey = autoGeneratedKey;
    }

    @Override
    public PreparedStatement generatePreparedStatement(Connection connection) throws SQLException {
        PreparedStatement preparedStatement;
        namedQueryParser = new NamedQueryParser();

        if (autoGeneratedKey) {
            preparedStatement = connection.prepareStatement(namedQueryParser.getSubstituteNamedParameterSql(sql), PreparedStatement.RETURN_GENERATED_KEYS);
        } else {
            preparedStatement = connection.prepareStatement(namedQueryParser.getSubstituteNamedParameterSql(sql));
        }

        addStatementParameters(preparedStatement);
        return preparedStatement;
    }

    void addStatementParameters(PreparedStatement preparedStatement) throws SQLException {
        List<String> orderedNamedParameter = namedQueryParser.getOrderedNamedParameters(sql);

        int index = 1;
        for (String parameter : orderedNamedParameter) {
            Object parameterValue = parameterMap.get(parameter);
            ParameterSetter.setParameter(preparedStatement, parameterValue, index);
            index++;
        }
    }

}
