package com.gromoks.jdbctemplate.util;


import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;

public class PreparedStatementGenerator {
    private String sql;
    private Map<String, ?> parameterMap;
    private boolean autoGeneratedKey;
    private NamedQueryParser namedQueryParser;

    public PreparedStatementGenerator(String sql, Map<String, ?> parameterMap) {
        this.sql = sql;
        this.parameterMap = parameterMap;
    }

    public PreparedStatementGenerator(String sql, Map<String, ?> parameterMap, boolean autoGeneratedKey) {
        this.sql = sql;
        this.parameterMap = parameterMap;
        this.autoGeneratedKey = autoGeneratedKey;
    }

    public PreparedStatement generatePreparedStatement(Connection connection) throws SQLException {
        PreparedStatement preparedStatement;
        namedQueryParser = new NamedQueryParser(sql);

        if (autoGeneratedKey) {
            preparedStatement = connection.prepareStatement(namedQueryParser.getSubstituteNamedParameterSql(), PreparedStatement.RETURN_GENERATED_KEYS);
        } else {
            preparedStatement = connection.prepareStatement(namedQueryParser.getSubstituteNamedParameterSql());
        }

        addStatementParameters(preparedStatement);
        return preparedStatement;
    }

    void addStatementParameters(PreparedStatement preparedStatement) throws SQLException {
        List<String> orderedNamedParameter = namedQueryParser.getOrderedNamedParameters();

        int index = 1;
        for (String parameter : orderedNamedParameter) {
            Object parameterValue = parameterMap.get(parameter);

            if (Integer.class.equals(parameterValue.getClass())) {
                preparedStatement.setInt(index, (Integer) parameterValue);
                index++;
            } else if (String.class.equals(parameterValue.getClass())) {
                preparedStatement.setString(index, (String) parameterValue);
                index++;
            } else if (Double.class.equals(parameterValue.getClass())) {
                preparedStatement.setDouble(index, (Double) parameterValue);
                index++;
            } else {
                throw new IllegalArgumentException("Unknown data type: " + parameterValue.getClass());
            }
        }
    }

}
